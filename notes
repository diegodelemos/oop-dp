link: http://jacek.web.cern.ch/jacek/courses/dp/course.html

(00) Adapter/Wrapper                     ---- Structural
     ~ Adapts interfaces

(01) Decorator/Wrapper                   ---- Structural
     ~ Avoids Class explosion
     ~ Runtime configuration (while
       chaning the identity of the
       objects)
     ~ Doesn't preserve object identity
     ~ Changes the skin

(02) Abstract Factory/Kit                ---- Creational
     ~ **Having `types` as first class
       objects**
     ~ In Python everything is a first
       class object so this pattern
       is 

(03) Template Method                     ---- Behavioural

(04) Factory Method/Virtual Constructor  ---- Creational
     ~ Typicaly done in python using
       @classmethod

(05) Singleton                           ---- Creational
     ~ Not just having global shared
       state
     ~ The goal is to make sure we have
       just one object instance
       i.e. printer queue, stdout

(06) State				 ---- Behavioural
     ~ Preserves object identity
     ~ Changes the guts

(07) Strategy				 ---- Behavioural
     ~ **Having functions as first class
       objects**
     ~ Out of the box in Python


               _____________________________________
              | Creational        | Behavioural	    |
 ---------------------------------------------------|
|Inheritance  |  Factory Method	  | Template Method |
|---------------------------------------------------|
|Composition  |  Abstract Factory | Strategy        |
|___________________________________________________|